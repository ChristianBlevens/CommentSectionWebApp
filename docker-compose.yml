services:
  # Database containers
  postgres-comments:
    image: postgres:15-alpine
    container_name: comment-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME:-comments_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres-comments-data:/var/lib/postgresql/data
    # Port disabled for security
    # Enable only for debugging
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comment-network

  postgres-moderation:
    image: postgres:15-alpine
    container_name: moderation-postgres
    restart: always
    environment:
      POSTGRES_DB: ${MODERATION_DB_NAME:-moderation_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
    volumes:
      - postgres-moderation-data:/var/lib/postgresql/data
    # Port disabled for security
    # Enable only for debugging
    # ports:
    #   - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comment-network

  # Session and cache store
  redis:
    image: redis:7-alpine
    container_name: comment-redis
    restart: always
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000 --appendonly yes
    volumes:
      - redis-data:/data
    # Port disabled for security
    # Enable only for debugging
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - comment-network

  # Main API server
  backend-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: comment-backend-api
    restart: always
    environment:
      NODE_ENV: production
      PORT: ${API_PORT:-3000}
      DB_HOST: postgres-comments
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-comments_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      REDIS_URL: redis://redis:6379
      MODERATION_API_URL: http://moderation-service:3001
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_REDIRECT_URI: ${DISCORD_REDIRECT_URI:-http://localhost:8080}
      DISCORD_SERVER_URL: ${DISCORD_SERVER_URL:-}
      INITIAL_MODERATORS: ${INITIAL_MODERATORS:-}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080}
      SESSION_DURATION: ${SESSION_DURATION:-86400}
    # Port disabled for security
    # Access via nginx only
    # ports:
    #   - "${API_PORT:-3000}:${API_PORT:-3000}"
    depends_on:
      postgres-comments:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - comment-network

  # AI content moderation
  moderation-service:
    build:
      context: .
      dockerfile: Dockerfile.moderation
    container_name: comment-moderation-service
    restart: always
    environment:
      NODE_ENV: production
      PORT: ${MODERATION_PORT:-3001}
      DB_HOST: postgres-moderation
      DB_PORT: 5432
      DB_NAME: ${MODERATION_DB_NAME:-moderation_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      ADMIN_KEY: ${ADMIN_KEY}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:8080}
    # Port disabled for security
    # Access via nginx only
    # ports:
    #   - "${MODERATION_PORT:-3001}:${MODERATION_PORT:-3001}"
    depends_on:
      postgres-moderation:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - comment-network

  # Nginx reverse proxy
  frontend:
    image: nginx:alpine
    container_name: comment-frontend
    restart: always
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/generate-dhparam.sh:/docker-entrypoint.d/10-dhparam.sh:ro
      - ./docker/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend-api
      - moderation-service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "--no-check-certificate", "https://localhost:443"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comment-network
    environment:
      - SSL_DOMAIN=${SSL_DOMAIN:-localhost}

  # Discord notification bot
  discord-bot:
    build:
      context: .
      dockerfile: Dockerfile.discord-bot
    container_name: comment-discord-bot
    restart: always
    environment:
      NODE_ENV: production
      PORT: ${BOT_PORT:-3002}
      DB_HOST: postgres-comments
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-comments_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres123}
      REDIS_URL: redis://redis:6379
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      FRONTEND_URL: ${DISCORD_REDIRECT_URI:-http://localhost:8080}
    depends_on:
      postgres-comments:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - comment-network

volumes:
  postgres-comments-data:
    driver: local
  postgres-moderation-data:
    driver: local
  redis-data:
    driver: local

networks:
  comment-network:
    driver: bridge